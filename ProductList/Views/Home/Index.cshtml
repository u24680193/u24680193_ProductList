<h3>S1L09 Session 09 <br />Processing data with lists in MVC moving towards data manipulation and processing</h3>
<hr />
<div style="max-height: 450px; overflow-y: auto;">
    <p>
        <table>
            <tr>
                <td>
                    <img src="~/Content/images/IMG_5536.jpg" alt="Your Photo" width="150" height="250" />
                </td>
                <td>
                    <p><strong>Name:</strong> Kimera </p>
                    <p><strong>Surname:</strong> Perumal </p>
                    <p><strong>Student Number:</strong> 24680193 </p>
                </td>
            </tr>
        </table>

        <h2>Steps Followed to Update the Project</h2>
        <ul>
            <li><strong>Step 1:</strong> Download and unzip the sample project from Session 09 to use for the practical.</li>
            <li><strong>Step 2:</strong> Edit Index.cshtml to display your student details, a photo, and a bullet-point summary of your update steps.</li>
            <li><strong>Step 3:</strong> Adapt the specified controller, views, and models, and create a new model named Supplier.cs.</li>
            <li><strong>Step 4:</strong> Add three Dropdowns and two Textboxes to the view, ensuring proper alignment, validation, and sequential enabling.</li>
            <li><strong>Step 5:</strong> Update jQuery to handle model-related data binding for the textboxes.</li>
            <li><strong>Step 6:</strong> Revise the jQuery controlling Edit, Save, and Delete button functionality.</li>
            <li><strong>Step 7:</strong> Ensure jQuery enables/disables textboxes when Edit is clicked.</li>
            <li><strong>Step 8:</strong> Update jQuery to fully remove a row when Delete is clicked.</li>
            <li><strong>Step 9:</strong> Make sure new form elements are also affected by existing button behavior.</li>
            <li><strong>Step 10:</strong> Update Add button jQuery to assign unique IDs to newly added items.</li>
            <li><strong>Step 11:</strong> Revise Edit and Save jQuery to target specific rows using the new IDs.</li>
            <li><strong>Step 12:</strong> Ensure all jQuery supports the updated controls, enabling CRUD functionality based on dynamically added IDs.</li>
            <li><strong>Step 13:</strong> Add the new Supplier model with ID and Name properties.</li>
            <li><strong>Step 14:</strong> Update the ViewModel to include a reference to the new Supplier model.</li>
            <li><strong>Step 15:</strong> Populate the repository with 3 suppliers, 9 categories, and 16 products with no overlaps.</li>
            <li><strong>Step 16:</strong> Establish relationships: Supplier → Category → Product, following current naming conventions.</li>
            <li><strong>Step 17:</strong> Update the controller logic to support the new model, view changes, and possibly add a new action.</li>
            <li><strong>Step 18:</strong> Enhance the project by integrating a new model, Dropdown, and Textbox with full jQuery CRUD support.</li>
            <li><strong>Step 19:</strong> Add any extra models, methods, or variables needed to ensure functionality.</li>
            <li><strong>Step 20:</strong> Ignore irrelevant parts of the sample and focus on enhancing Product >> Index.cshtml.</li>
        </ul>


        <script type="text/javascript">
            $(document).ready(function () {
                // Add item to list
                $("#addItemButton").click(function () {
                    var itemText = $("#newItemText").val();
                    var newItem = "<li>" + itemText + "</li>";
                    $("#myList ul").append(newItem);
                });

                // Remove item from list
                $("#removeItemButton").click(function () {
                    $("#myList ul li:last-child").remove();
                });
            });
        </script></code></pre>


</div>